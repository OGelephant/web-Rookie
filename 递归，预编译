运行期上下文：当函数执行时，会创建一个称为执行期上下文的内部对象。一个执行期上下文定义了一个函数执行时的环境，函数每次执行时对应的执行上下文都是独一无二的
所以多次调用一个函数会导致创建多个执行上下文，当函数执行完毕它所产生的执行上下文被销毁。
变量和函数的上下文决定了它能访问哪些内容，以及它的行为，每个上下文都有他的关联的变量对象。 


递归很慢，这是它的缺点，
写一个关于阶乘的函数
```
<script>
function mul (n){
var = 1;
for(var i = 1; i<=n;i++){

num*i;
if(n==1){
return 1;
}

return n*mul (n-1);
}


}


</script>

```
### 递归的方法

1.找规律
2.找出口
经典的斐波那切数列
```
function fb () {

if(n==1||n==2){
return 1;
}

return  fb(n-1)+fb(n-2);

}
```

互相嵌套的函数
外面的不能访问里面的
里面的可以访问外面的

---

### 闭包

js是单线程的解释性语言
//预编译 
一行行执行
执行之前先扫描一遍
//函数声明整体提升
//变量  声明提升


implay global 暗示全局变量：即任何变量如果变量未经声明就赋值，此变量就为全局变量所有。
一切声明的全局变量也归window所有。
 

#### 预编译
函数体里面的

函数预编译过程

第一步  创建AO对象
第二步  找形参和变量声明
第三步  将形参和实参相统一
第四步  在函数体里找函数声明，赋值函数体

预编译不知发生在函数体   还发生在全局


全局的变量 
第一步创建GO （gobal object ）
 window 就是GO
 任何全局变量都是window的属性
 



